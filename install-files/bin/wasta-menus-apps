#!/bin/bash

# ==============================================================================
# wasta-menus-apps
#
# This script allows a user to adjust their Wasta-Menus applications.
#
# MANY THANKS to the Balsa team for the original concept.
#
#   2014-01-09 rik: Initial script
#   2014-06-09 rik: adding pkexec hack to prompt for admin password.  Admin
#       ID not needed for script changes, but don't want limited users running.
#   2015-09-27 rik: renaming dialogs to "Wasta-Menus" not "wasta [Menus]"
#       - Repointing to /etc/wasta-menus-default-apps.txt (now the correct
#         location since using update-alternatives)
#   2016-04-29 rik: adjusting system and user lists to not look at NoDisplay
#       sections of .desktop files.
#       - Renamed to "wasta-menus-apps"
#   2017-03-15 rik: add ability to add apps from local or local save dirs
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Load common functions
# ------------------------------------------------------------------------------
. $(dirname $0)/../share/wasta-menus/functions

# ------------------------------------------------------------------------------
# Ensure script running as regular user
# ------------------------------------------------------------------------------
if [ $(id -u) -eq 0 ]
then
    echo "This script should NOT be run with SUDO!  Must be regular user!!"
    echo "Exiting...."
    sleep 5s
    exit 1
fi

LISTDIR=$HOME/.cache/wasta-menus
MSG=""

mkdir -p $LISTDIR

# ------------------------------------------------------------------------------
# Hack to ensure user knows an admin password: but again changes are made at the
#   user level, so this is just a hack but no admin password actually needed :)
# ------------------------------------------------------------------------------
pkexec echo "starting wasta-menus-apps"
RETURN=$?
if [ $RETURN -ne 0 ];
then
    echo
    echo "*** Administrative Authentication failed, wasta-menus exiting..."
    echo
    exit 1
fi

# ------------------------------------------------------------------------------
# Main Processing
# ------------------------------------------------------------------------------

migrate_existing_config

# REMOVE old system-list.txt
rm -f "$LISTDIR/system-list.txt"

# FIRST, add in local user items (could have space from wine apps)
#find "$USER_APPS_DIR" -iname *.desktop -exec echo -n '"{}" ' \; | grep -v -s '^NoDisplay=true' |
#    xargs -r grep -H '^Name=' -m 1 >> "$LISTDIR/system-list.txt"
grep -r -s -L '^NoDisplay=true' "$USER_APPS_DIR" |
    xargs -r grep -H '^Name=' -m 1 >> "$LISTDIR/system-list.txt"

# SECOND, add in local user save items if exists (could have space from wine apps)
if [ -e "$USER_APPS_DIR_SAVE" ];
then
   # find "$USER_APPS_DIR_SAVE" -iname *.desktop -exec echo -n '"{}" ' \; | grep -v -s '^NoDisplay=true' |
   #     xargs -r grep -H '^Name=' -m 1 >> "$LISTDIR/system-list.txt"
    grep -r -s -L '^NoDisplay=true' "$USER_APPS_DIR" |
        xargs -r grep -H '^Name=' -m 1 >> "$LISTDIR/system-list.txt"
fi

# LAST, Load up system applications
grep -s -L '^NoDisplay=true' ${SYSTEM_APPS_DIRS[@]/%//*.desktop} |
    xargs -r grep -H '^Name=' -m 1 >> "$LISTDIR/system-list.txt"

# If no current WASTA_USER_APPS_DIR, Load up default Wasta Menus Applications List
if ! wasta_apps_dir_exists
then
    MSG+=\
"No existing Wasta-Menus Apps list found for current user.\n
<b>Creating default Wasta-Menus Apps list.</b>\n\n"
    if ! create_wasta_apps_dir
    then
        MSG+=\
"<b>PROBLEM FOUND: No default Wasta-Menus Apps list</b>
Work with an Administrator to solve the problem.\n\n"
    fi
fi

# Now Load up list of current user's wasta-menus apps
find $WASTA_USER_APPS_DIR -iname *.desktop -exec echo -n '"{}" ' \; | grep -v -s '^NoDisplay=true' | \
    xargs -r grep -H '^Name=' -m 1 > "$LISTDIR/user-list.txt"

# Sort List Alphabetically by Display Name (and remove dupes)
sort $LISTDIR/system-list.txt -u -t: -k2 -o "$LISTDIR/sorted-list.txt"

# Build the array to displayed in the dialog box
unset APP_LIST
while read -r LINE
do
    LOCATION=${LINE%%:*}
    ITEM=${LINE##*/}
    APP_NAME=${ITEM##*=}
    # rik: adding -F to grep so that square brackets treated as literal
    # characters, such as in 'wasta [Backup]', else selection will fail
    ENABLED=$(if grep -q -F "$ITEM" "$LISTDIR/user-list.txt"; then echo TRUE; else echo FALSE; fi)
    APP_LIST+=($ENABLED)
    APP_LIST+=("$APP_NAME")
    APP_LIST+=("$LOCATION")

done < "$LISTDIR/sorted-list.txt"

# Display the dialog and store the users selections in a string
#   with a semicolon delimiter between each selection
SELECTED_APPS=$(zenity --list --title "Wasta-Menus Apps" \
    --window-icon=/usr/share/icons/hicolor/64x64/apps/wasta-menus.png \
    --text "<b>Select the Wasta-Menus Apps for the current user:</b>" \
    --checklist --separator=";" --height=500 --print-column=3 \
    --column "" --column "App Name" --column "App Location" "${APP_LIST[@]}")

if [ $? -ne 0 ]
then
    MSG+="<b>Cancelled!</b>\n\nNo changes have been made to the current user's Wasta-Menus.\n\n"
else
    # Remove any existing apps
    rm -f "$WASTA_USER_APPS_DIR"/*

    MSG+="<b>Wasta-Menus Apps list for the current user:</b>\n\n"

    # Create symlinks to the selected programs
    OLDIFS=$IFS
    IFS=";"
    for ADD_APP in $SELECTED_APPS;
    do
        # retrieve APP NAME from Sorted List
        LIST_LINE=$(grep "$ADD_APP" "$LISTDIR/sorted-list.txt")

        # if LIST_LINE is in USER_APPS_DIR_SAVE then need to move .desktop file
        # to USER_APPS_DIR and re-point LIST_LINE
        # MSG+="list line: $LIST_LINE and user apps dir save: $USER_APPS_DIR_SAVE"
        if [[ $ADD_APP == *"$USER_APPS_DIR_SAVE"* ]];
        then
            # move but need to get rid of prefix path
            # get app path
            MSG+=" YO INSIDE\n"
            MSG+=" LIST_LINE: $LIST_LINE\n"
            MSG+=" ADD_APP: $ADD_APP\n"
            ADD_APP_TRIM=${ADD_APP/$USER_APPS_DIR_SAVE/}
            ADD_APP_TRIM=${ADD_APP_TRIM/\//}
            MSG+="ADD_APP_TRIM: $ADD_APP_TRIM\n"
            move_save_to_local "$ADD_APP_TRIM"
            MSG+="moved save to local, now changing $ADD_APP\n"
            ADD_APP=${ADD_APP/$USER_APPS_DIR_SAVE/$USER_APPS_DIR}
            MSG+="new add_APP: $ADD_APP\n"
        fi
        #MSG+="Outside going to add $LIST_LINE\n"
        ADD_APP_NAME=${LIST_LINE##*=}

        # symlink system app to user app
        ln -s "$ADD_APP" "$WASTA_USER_APPS_DIR/"
        MSG+="    $ADD_APP_NAME\n"
    done
    IFS=$OLDIFS

    # IF any local apps remain not in the user's wasta-menus, move them to save
    move_local_to_save

    MSG+="\n"
fi

MSG+="<b>Finished processing</b>"

# ------------------------------------------------------------------------------
# Finished
# ------------------------------------------------------------------------------

zenity --info --no-wrap --title "Wasta-Menus Apps" --text "$MSG" \
    --window-icon=/usr/share/icons/hicolor/64x64/apps/wasta-menus.png

exit 0
